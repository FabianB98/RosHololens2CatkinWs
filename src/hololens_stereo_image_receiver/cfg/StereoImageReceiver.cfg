#!/usr/bin/env python
PACKAGE = "hololens_stereo_image_receiver"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("preprocessingDoImageNormalization", bool_t, 1, "Should the raw stereo images be normalized to a pixel value range of [0, 255]?", False)
gen.add("preprocessingDoHistogramEqualization", bool_t, 1, "Should the raw stereo images be normalized using histogram equalization?", False)
gen.add("preprocessingDoMedianFiltering", bool_t, 1, "Should the raw stereo images be denoised using a median filter?", False)
gen.add("preprocessingMedianFilterKernelSize", int_t, 1, "The kernel size for the median filter.", 3, 3, 21)

mode_enum = gen.enum([ gen.const("MODE_SGBM",      int_t, 0, "MODE_SGBM"),
                       gen.const("MODE_HH",        int_t, 1, "MODE_HH"),
                       gen.const("MODE_SGBM_3WAY", int_t, 2, "MODE_SGBM_3WAY"),
                       gen.const("MODE_HH4",       int_t, 3, "MODE_SGBM_3WAY")],
                     "The modes in which StereoSGBM can operate in.")

gen.add("sgbmMinDisparity", int_t, 2, "Minimum possible disparity value.", 0, 0, 480)
gen.add("sgbmNumDisparities", int_t, 2, "Maximum disparity minus minimum disparity", 96, 0, 480)
gen.add("sgbmBlockSize", int_t, 2, "Matched block size. Must be an odd number >= 1.", 15, 1, 75)
gen.add("sgbmP1Multiplier", int_t, 2, "Multiplier for P1 controlling disparity smoothness.", 8, 0, 1000)
gen.add("sgbmP2Multiplier", int_t, 2, "Multiplier for P2 controlling disparity smoothness.", 32, 0, 1000)
gen.add("sgbmDisp12MaxDiff", int_t, 2, "Maximum allowed difference (in integer pixel units) in the left-right disparity check.", 100, -1, 480)
gen.add("sgbmPreFilterCap", int_t, 2, "Truncation value for the prefiltered image pixels", 0, 0, 1000)
gen.add("sgbmUniquenessRatio", int_t, 2, "Margin in percentage by which the best (minimum) computed cost function value should win the second best value to consider the found match correct.", 15, 0, 100)
gen.add("sgbmSpeckleWindowSize", int_t, 2, "Maximum size of smooth disparity regions to consider their noise speckles and invalidate.", 200, 0, 10000)
gen.add("sgbmSpeckleRange", int_t, 2, "Maximum disparity variation within each connected component.", 2, 0, 10)
gen.add("sgbmMode", int_t, 2, "The mode to use.", 1, 0, 3, edit_method=mode_enum)

gen.add("wlsLambda", double_t, 4, "Amount of regularization during filtering.", 10000.0, 0.0, 20000.0)
gen.add("wlsSigma", double_t, 4, "Sensitivity of the filtering process to source image edges.", 1.0, 0.0, 5.0)

gen.add("reconstructPointCloudFromRawDisparityMap", bool_t, 8, "Should the point cloud be reconstructed from the raw disparity map instead of the filtered disparity map?", False)
gen.add("minDisparityForReconstruction", double_t, 8, "The minimum disparity a pixel of the disparity map must have in order to be reconstructed as a point.", 5.0, 0.0, 480.0)

gen.add("doDownsampling", bool_t, 16, "Should the point cloud be downsampled?", True)
gen.add("downsamplingLeafSize", double_t, 16, "The leaf size to use when downsampling the point cloud.", 0.01, 0.0001, 0.1)

gen.add("doOutlierRemovalRadius", bool_t, 32, "Should outliers be removed using a radius outlier removal filter?", True)
gen.add("outlierRemovalRadiusSearch", double_t, 32, "The search radius to use for the radius outlier removal filter.", 0.05, 0.0, 1.0)
gen.add("outlierRemovalMinNeighborsInRadius", int_t, 32, "The minimum amount of neighbors to be found when using the radius outlier removal filter.", 12, 0, 1000)

gen.add("doOutlierRemovalStatistical", bool_t, 64, "Should outliers be removed using a statistical outlier removal filter?", False)
gen.add("outlierRemovalNeighborsToCheck", int_t, 64, "The amount of neighbors to check when using the statistical outlier removal filter.", 10, 1, 1000)
gen.add("outlierRemovalStdDeviationMultiplier", double_t, 64, "The standard deviation multiplier to use when using the statistical outlier removal filter.", 0.5, 0.0, 10.0)

gen.add("doOutlierRemovalClustering", bool_t, 128, "Should outliers be removed using euclidean clustering?", False)
gen.add("outlierRemovalClusterTolerance", double_t, 128, "The distance how far two clusters have be apart in order to be considered different clusters when applying the clustering outlier removal filter.", 0.08, 0.0, 10.0)
gen.add("outlierRemovalMinClusterSize", int_t, 128, "The minimum amount of points a cluster must have when applying the clustering outlier removal filter.", 500, 1, 100000)

exit(gen.generate(PACKAGE, "hololens_stereo_image_receiver", "StereoImageReceiver"))